AIKit-Spark Linux 接入文档
注意： 该接口当前仅供测试使用，切勿直接用于生产环境。如您需要申请测试，请点击前往申请页面 。

#SDK集成指南
#1.1 SDK包目录结构说明
── SDK                          // SDK 头文件及动态库
│   ├── include                 // SDK所需头文件列表
│   │   ├── aikit_biz_api.h
│   │   ├── aikit_biz_builder.h
│   │   ├── aikit_biz_obsolete_builder.h
│   │   ├── aikit_biz_type.h
│   │   ├── aikit_common.h
│   │   ├── aikit_spark_api.h   // Spark核心头文件
│   │   └── aikit_type.h
│   └── libs                    // SDK动态库目录
│       └── x64
│           └── libaikit.so
── demo                          // demo目录
│   ├── build.sh                 // demo编译脚本
│   ├── run.sh                   // demo运行脚本
│   ├── README.md                // demo运行说明
│   ├── sparkDemo.cpp            // demo源码
│   └── sparkDemo.h
── docs                          // SDK相关文档
#1.2 demo运行步骤
进入sdk包内,填写sparkDemo.cpp中appID、apiKey、apiSecret字段，demo目录运行build.sh 完成demo编译，生成sparkDemo可执行文件

运行run.sh， 即可进行demo交互体验

demo编译环境建议如下：

编译环境信息	版本
编译系统	Ubuntu 18.04 x86_64
编译器版本	gcc 7.5.0
链接器版本	ld 2.30
#1.3 项目集成步骤
导入SDK目录内include头文件和libs下对应libaikit.so动态库
集成SDK相关接口，接口调用流程及详细说明如下：
#2. 详细API介绍
Demo说明（C++语言）：

static void onChatToken(AIChat_Handle* handle, const int& completionTokens, const int& promptTokens, const int& totalTokens) {
    cout<<" promptTokens:"<<promptTokens<<" totalTokens:"<<totalTokens<<endl;
}

static void onChatOutput(AIChat_Handle* handle, const char* role, const char* content, const int& index) {
    cout<<"role: "<<role<<" :content: "<<content<<endl;  
}

static void onChatError(AIChat_Handle* handle,const int& err, const char* errDesc) {
    cout<<"chatOnError: err:"<<err<<" ,desc:"<<errDesc<<endl;
}

int main() {
    // SDK全局初始化参数配置
    AIKIT_InitParam initParam{};
    initParam.appID = "yourAppid";
    initParam.apiKey = "yourKey";
    initParam.apiSecret = "yourSecret";
    // SDK全局初始化
    int ret = AIKIT_Init(&initParam);
    if(ret != 0) {
        printf("AIKIT_Init failed:%d\n",ret);
        return 0;
    }
    // 异步回调函数注册
    AIKIT_ChatCallback({ onChatOutput, onChatToken, onChatError });
	// 配置请求参数
   	ChatParam* params = ChatParam::builder();
    params->uid("xxxid")
          ->domain("general")
          ->maxToken(2048);
    // 设置输入文本
	string inputText="你好";
    // 发起交互请求
    ret = AIKIT_AsyncChat(params, inputText.c_str() , nullptr);
    if(ret != 0){
        printf("AIKIT_AsyncChat failed:%d\n",ret);
        return ret;
    }
    // 等待异步回调
    // ........
    
    // 应用退出，逆初始化SDK
    AIKIT_UnInit();
    return 0;
}
Demo中常见设置参照下方接口文档进行开发。

#2.1 SDK初始化接口
AIKITAPI int32_t AIKIT_Init(AIKIT_InitParam* param);
说明：返回 0表示成功，其他表示错误。 该函数用以初始化整个SDK，初始化相关配置参数如下：

#2.1.1 SDK初始化参数配置
typedef struct {
    const char* appID;        // 应用id
    const char* apiKey;       // 应用key
    const char* apiSecret;    // 应用secret
} AIKIT_InitParam;
说明：这个接口用于设置SDK初始化相关的参数，相关参数配置参考下表：

字段	含义	类型	说明	是否必传
appID	应用的app_id，从开放平台控制台创建的应用中获取	string		是
apiKey	应用的app_key，从开放平台控制台创建的应用中获取	string		是
apiSecret	应用的app_secret，从开放平台控制台创建的应用中获取	string		是
#2.1.2 回调函数注册
AIKITAPI int32_t AIKIT_ChatCallback(const AIKIT_ChatCBS& cbs);
说明：注册回调函数用于接收处理异步结果。其中，AIKIT_ChatCBS是一个包含回调函数的结构体，定义如下：

typedef struct {
    onChatOutput outputCB;     // 输出回调
    onChatToken  tokenCB;      // token计算信息回调
    onChatError  errorCB;      // 错误回调
} AIKIT_ChatCBS;
其中三个回调函数定义如下：

#1. onChatOutput，用于异步请求回调结果输出
typedef void (*onChatOutput)(AIChat_Handle* handle, const char* role, const char* content, const int& index);
参数：

字段	含义	类型
handle	用户句柄	AIChat_Handle*
role	user：表示用户的提问， assistant：表示AI的回复	const char*
content	文本内容，该角色的对话内容	const char*
index	结果序号，在多候选中使用，保留字段	int
#2. onChatToken，用于统计Token相关的数据
typedef void (*onChatToken)(AIChat_Handle* handle, const int& completionTokens, const int& promptTokens, const int& totalTokens);
参数：

字段	含义	类型
handle	用户句柄	AIChat_Handle*
completionTokens	本次接口回答tokens的大小	int
promptTokens	本次输入的总tokens大小，注意：在使用上下文场景中带的历史会话信息也会计费，开发者需要酌情考虑保留的历史对话信息数量，避免浪费tokens	int
totalTokens	本次计费的总tokens大小，值为completionTokens和promptTokens的和	int
#3. onChatError，用于返回错误信息
typedef void (*onChatError)(AIChat_Handle* handle, const int& err, const char* errDesc);
详细错误码描述见接口说明文档最后错误码列表。

参数：

字段	含义	类型
handle	用户句柄	AIChat_Handle*
err	错误码	int
errDesc	错误信息	const char*
#4. 用户句柄handle说明
说明：handle是一个结构体，定义如下：

typedef struct AICHAT_HANDLE {
    void*       usrContext;  // 用户上下文指针
} AIChat_Handle;
参数如下：

字段	含义	类型
usrContext	用户上下文指针	void*
#2.2 交互请求接口<异步>
AIKITAPI int32_t AIKIT_AsyncChat(const ChatParam* params, const char* inputText, void* usrContext);
说明：这个接口用于用户异步发送请求，ret为结果错误码，0=成功，错误码见最后错误码列表。相关参数配置参考下表：

字段	含义	是否必填	备注
params	请求参数配置信息	是	见 3.2.1请求参数配置
inputText	请求文本内容	是	具体支持文本格式，见3.2.2请求文本内容格式
usrContext	用户上下文指针	否	此指针会在回调函数中带出，用于应用进行对应上下文操作
#2.2.1 请求参数配置
ChatParam* ChatParam::builder();
说明：这个接口用于配置请求参数，相关参数配置参考下表：

字段	含义	类型	限制	是否必传
domain	需要使用的领域，当前仅开放"general"	char*	当前仅开放"general"	是
uid	授权的用户id，用于关联用户交互的上下文	char*	"maxLength":32	否
maxToken	回答的tokens的最大长度	int	取值范围1-4096，默认2048	否
temperature	配置核采样阈值，改变结果的随机程度	float	最小是0, 最大是1，默认0.5;
数字越大，随机性越小，改变此值会影响效果。	否
auditing	内容审核的场景策略	char*	默认default	否
topK	配置从k个候选中随机选择⼀个（⾮等概率)	int	取值范围1-6，默认值4	否
请求参数配置示例：

ChatParam* params = ChatParam::builder();
params->uid("xxxid")
      ->domain("general")
      ->maxToken(1024);
#2.2.2 请求文本内容格式
说明：不同对话交互场景，输入文本格式不同，具体不同如下：

#1. 单轮交互
输入文本是纯字符串，代码示例：

ChatParam* params = ChatParam::builder();
params->uid("xxxid")
      ->domain("general")
      ->maxToken(2048);
// 设置输入文本
string inputText="你好";
// 发起交互请求
ret = AIKIT_AsyncChat(params, inputText.c_str() , nullptr);
#2. 多轮持续交互，包含交互上下文
#1、用户自行管理交互上下文，输入文本是json数组格式包含完整交互历史，具体SDK调用流程如下：
1.1、配置请求相关参数

ChatParam* params = ChatParam::builder();
params->uid("xxxid")
      ->domain("general")
      ->maxToken(2048);
1.2、第一轮交互：

// 设置输入文本
string inputText="你好";
// 发起交互请求
ret = AIKIT_AsyncChat(params, inputText.c_str() , nullptr);
或

// 设置输入文本
string inputText = R"(
[
 {"role": "user", "content": "你好"},        // ⽤户第⼀个问题 role是user,表示是⽤户的提问
]
)";
// 发起交互请求
ret = AIKIT_AsyncChat(params, inputText.c_str() , nullptr);
1.3、第二轮交互

// 每次输入的请求文本和对应请求的响应文本都需要按照交互顺序完整的记录下来，最终形成的文本数据格式如下：
string inputText = R"(
[
 {"role": "user", "content": "你好"},        // ⽤户第⼀个问题 role是user,表示是⽤户的提问
 {"role": "assistant", "content": "你好！"}, // AI的第⼀个回复 role是assistant，表示是AI的回复
 {"role": "user", "content": "你是谁？"},    // ⽤户第⼆个问题
]
)";
ret = AIKIT_AsyncChat(params, inputText.c_str() , nullptr);
#2.3 逆初始化接口
说明：应用退出时可调用此函数回收SDK占用相关资源。

AIKITAPI int32_t AIKIT_UnInit() ;